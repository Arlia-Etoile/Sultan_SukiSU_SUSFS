# 工作流名称，明确为 Pixel 8 系列
name: Official Kernel Build for Pixel 8 Series

permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      # codename 输入被保留，但现在应传入 'shusky' (Pixel 8) 或 'husky' (Pixel 8 Pro)
      codename:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
  
jobs:
  build-kernel-official-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'
          
      - name: Installing dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Set Kernel Source Directory Variable
        run: |
          echo "CONFIG=kernel_source" >> $GITHUB_ENV
          echo "Kernel source directory is set to: kernel_source"

      - name: Clone Dependencies and Official Kernel Source
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          # 注意: AnyKernel3 的分支可能也需要根据新内核进行调整
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
          
          echo "Cloning official Pixel 8 (shusky) kernel source..."
          git clone --depth=1 https://android.googlesource.com/device/google/shusky-kernels/6.1 kernel_source
      
      # ... 后续的打补丁、添加KernelSU等步骤保持不变 ...
      # 这些步骤将在新的 'kernel_source' 目录中执行

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-test

      - name: Apply SUSFS Patches
        run: |
          cd "$CONFIG"
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

      - name: Apply KSU Hooks
        run: |
          cd "$CONFIG"
          cp ../kernel_patches/sukisu/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          
      - name: Add Configuration Settings
        run: |
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."
          # 省略大量 echo 配置，与原文件相同
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
          # ... (此处省略其他配置项)
          echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./arch/arm64/configs/gki_defconfig

      - name: Modify Local Version
        run: |
          cd "$CONFIG"
          echo "Modifying local version string..."
          # 确保 defconfig 文件存在，然后修改
          if [ -f "./arch/arm64/configs/${{ inputs.codename }}_defconfig" ]; then
            sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-Official-Mod"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          else
            echo "Warning: ${{ inputs.codename }}_defconfig not found. Skipping local version modification."
          fi

      - name: Build the Kernel
        run: |
          cd "$CONFIG"
          echo "Building the kernel for ${{ inputs.codename }}..."
          # 这个命令现在可以正常工作，因为仓库里有 shusky_defconfig 和 husky_defconfig
          make ${{ inputs.codename }}_defconfig -j$(nproc --all)
          make -j$(nproc --all)

      - name: Copy Images
        run: |
          cd "$CONFIG"
          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          

          if [ "${{ inputs.codename }}" == "shusky" ]; then
            echo "Concatenating DTBs for shusky (Pixel 8)..."
            cat ./out/google-devices/shusky/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "husky" ]; then
            echo "Concatenating DTBs for husky (Pixel 8 Pro)..."
            cat ./out/google-devices/husky/dts/*.dtb > ../AnyKernel3/dtb
          else
            echo "Error: Unsupported codename '${{ inputs.codename }}'. No DTB files will be copied."
            exit 1
          fi

      - name: Create ZIP File
        run: |
          cd ./AnyKernel3
          # ZIP 文件名现在会根据传入的 codename (shusky/husky) 动态生成
          ZIP_NAME="${{ inputs.codename }}_A16_Official-Mod_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
